---

- hosts: keenetic
  gather_facts: False

  remote_user: root

# Packages installation

  tasks:
  - name: Install required software
    raw: opkg install ipset curl iptables cron bind-dig

  - name: Create /bin/routing-update.sh script
    raw: |
          tee {{ prefix }}/bin/routing-update.sh > /dev/null <<EOF
          #!{{ shell }}
          echo "|==> Domain routing: Checking for network availability before updating IP sets"

          until ADDRS=\$(dig +short google.com @localhost) && [ -n "\$ADDRS" ] > /dev/null 2>&1; do sleep 5; done

          IPSET_VPN="{{ ipset_vpn_name }}"
          IPSET_DIRECT="{{ ipset_direct_name }}"
          LISTS_DIR="{{ lists_dir }}"

          {{ prefix }}/bin/routing-update-lists.sh

          echo "|==> Domain routing: Clearing ipset '\$IPSET_VPN'"
          ipset flush \$IPSET_VPN

          echo "|==> Domain routing: Clearing ipset '\$IPSET_DIRECT'"
          ipset flush \$IPSET_DIRECT

          echo "|==> Domain routing: Importing lists into ipset '\$IPSET_VPN'"
          {{ prefix }}/bin/routing-apply-list.sh "\$LISTS_DIR/subnet.routing.lst"
          {{ prefix }}/bin/routing-apply-list.sh "\$LISTS_DIR/ipsum.routing.lst"

          echo "|==> Domain routing: Importing custom unblock lists into ipset '\$IPSET_VPN'"
          {{ prefix }}/bin/routing-apply-custom-list.sh "\$IPSET_VPN" "{{ custom_vpn_hosts }}"

          echo "|==> Domain routing: Importing custom direct lists into ipset '\$IPSET_DIRECT'"
          {{ prefix }}/bin/routing-apply-custom-list.sh "\$IPSET_DIRECT" "{{ custom_direct_hosts }}"
          EOF

  - name: Create /bin/routing-update-lists.sh script
    raw: |
          tee {{ prefix }}/bin/routing-update-lists.sh > /dev/null <<EOF
          #!{{ shell }}

          LISTS_DIR="{{ lists_dir }}"

          mkdir -p \$LISTS_DIR

          echo "|==> Domain routing: Downloading block lists"
          curl -z \$LISTS_DIR/subnet.routing.lst https://antifilter.download/list/subnet.lst --output \$LISTS_DIR/subnet.routing.lst
          curl -z \$LISTS_DIR/ipsum.routing.lst https://antifilter.download/list/ipsum.lst --output \$LISTS_DIR/ipsum.routing.lst
          EOF

  - name: Create /bin/routing-apply-list.sh script
    raw: |
          tee {{ prefix }}/bin/routing-apply-list.sh > /dev/null <<EOF
          #!{{ shell }}

          IPSET_VPN="{{ ipset_vpn_name }}"

          cat "\$1" | sed "s/^/add \$IPSET_VPN /" | ipset restore -!
          EOF

  - name: Create /bin/routing-apply-custom-list.sh script
    raw: |
          tee {{ prefix }}/bin/routing-apply-custom-list.sh > /dev/null <<EOF
          #!{{ shell }}

          IPSET="\$1"
          FILE="\$2"

          [ -z "\$IPSET" ] && exit 1
          [ -z "\$FILE" ] && exit 1

          while read line || [ -n "\$line" ]; do

            [ -z "\$line" ] && continue
            [ "\${line:0:1}" = "#" ] && continue

            cidr=\$(echo \$line | grep -Eo '[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}/[0-9]{1,2}')

            if [ ! -z "\$cidr" ]; then
              ipset -exist add \$IPSET \$cidr
              continue
            fi

            range=\$(echo \$line | grep -Eo '[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}-[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}')

            if [ ! -z "\$range" ]; then
              ipset -exist add \$IPSET \$range
              continue
            fi

            addr=\$(echo \$line | grep -Eo '[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}')

            if [ ! -z "\$addr" ]; then
              ipset -exist add \$IPSET \$addr
              continue
            fi

            dig +short \$line @localhost | grep -Eo '[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}' | awk '{system("ipset -exist add '"\$IPSET"' "\$1)}'

          done < "\$FILE"
          EOF

  - name: Create /etc/ndm/fs.d/100-routing-ipset.sh
    raw: |
          tee {{ prefix }}/etc/ndm/fs.d/100-routing-ipset.sh > /dev/null <<EOF
          #!{{ shell }}

          [ "\$1" != "start" ] && exit 0

          echo "|==> Domain routing: Create ip set '{{ ipset_vpn_name }}' for blocked IPs"
          ipset create "{{ ipset_vpn_name }}" hash:net -exist

          echo "|==> Domain routing: Create ip set '{{ ipset_direct_name }}' for always direct IPs"
          ipset create "{{ ipset_direct_name }}" hash:net -exist

          # Dirty hack
          echo "|==> Domain routing: Sleeping 10 secs to allow filesystem to fully mount"
          sleep 10

          # update list
          {{ prefix }}/bin/routing-update.sh &

          exit 0
          EOF

  - name: Create /etc/ndm/netfilter.d/100-routing-fwmarks.sh
    raw: |
          tee {{ prefix }}/etc/ndm/netfilter.d/100-routing-fwmarks.sh > /dev/null <<EOF
          #!{{ shell }}

          [ "\$type" == "ip6tables" ] && exit 0
          [ "\$table" != "mangle" ] && exit 0

          IPSET_VPN="{{ ipset_vpn_name }}"
          IPSET_DIRECT="{{ ipset_direct_name }}"

          [ -z "\$(iptables-save | grep \$IPSET_VPN)" ] && \
          iptables -w -A PREROUTING -t mangle -m set --match-set "\$IPSET_VPN" dst,src -j MARK --set-mark 1

          [ -z "\$(iptables-save | grep \$IPSET_DIRECT)" ] && \
          iptables -w -A PREROUTING -t mangle -m set --match-set "\$IPSET_DIRECT" dst,src -j MARK --set-mark 2

          exit 0
          EOF

  - name: Create /etc/ndm/ifstatechanged.d/100-routing-route.sh script
    raw: |
          tee {{ prefix }}/etc/ndm/ifstatechanged.d/100-routing-route.sh > /dev/null <<EOF
          #!{{ shell }}

          VPN_INTERFACE="{{ vpn_interface_name }}"

          [ "\$1" == "hook" ] || exit 0
          [ "\$system_name" == "\$VPN_INTERFACE" ] || exit 0

          echo "|==> Domain routing: \$id change: \$change  to - up:\$up link:\$link connected:\$connected"

          case \${change}-\${connected}-\${link}-\${up} in
              link-yes-up-up)
                  ### Create routing tables for marked packets
                  if [ -z "\$(ip rule show | grep 1000:)" ]; then
                      echo "|==> Domain routing: add rule to \$VPN_INTERFACE"
                      ip rule add fwmark 1 table 1 priority 1000
                  fi

                  if [ -z "\$(ip route list table 1)" ]; then
                      echo "|==> Domain routing: add route to \$VPN_INTERFACE"
                      ip route add default dev \$VPN_INTERFACE table 1
                  fi

                  if [ -z "\$(ip rule show | grep 993:)" ]; then
                      echo "|==> Domain routing: add rule for direct access"
                      ip rule add fwmark 2 table main priority 993
                  fi

                  ### Disable HW NAT
                  sysctl -w net.ipv4.netfilter.ip_conntrack_fastnat=0 || true # NDMS2
                  sysctl -w net.netfilter.nf_conntrack_fastnat=0 || true # NDMS3
              ;;
              link-no-down-down)
                  ### Delete routing tables for marked packets
                  if [ -n "\$(ip rule show | grep 1000:)" ]; then
                      echo "|==> Domain routing: del rule to \$VPN_INTERFACE"
                      ip rule del table 1
                  fi

                  if [ -n "\$(ip route list table 1)" ]; then
                      echo "|==> Domain routing: del route to \$VPN_INTERFACE"
                      ip route flush table 1
                  fi

                  if [ -z "\$(ip rule show | grep 993:)" ]; then
                      echo "|==> Domain routing: del rule for direct access"
                      ip rule del fwmark 2 table main priority 993
                  fi

                  ### Enable HW NAT
                  sysctl -w net.ipv4.netfilter.ip_conntrack_fastnat=1 || true # NDMS2
                  sysctl -w net.netfilter.nf_conntrack_fastnat=1 || true # NDMS3
              ;;
          esac
          EOF

  - name: Create /etc/cron.daily/100-routing-update.sh
    raw: |
          tee {{ prefix }}/etc/cron.daily/100-routing-update.sh > /dev/null <<EOF
          #!{{ shell }}

          {{ prefix }}/bin/routing-update.sh

          exit 0
          EOF

  - name: "Create vpn list: {{ custom_vpn_hosts }}"
    raw: |
          if [ ! -f {{ custom_vpn_hosts }} ]; then tee {{ custom_vpn_hosts }} > /dev/null <<EOF
          rutracker.org
          rutor.info
          rutor.is
          new-rutor.org
          nnm-club.me
          tapochek.net
          thepiratebay.org
          bt1.t-ru.org
          bt2.t-ru.org
          bt3.t-ru.org
          bt4.t-ru.org

          lostfilm.tv
          seasonvar.ru
          kinozal.tv
          uniongang.tv

          lib.rus.ec
          flibusta.is
          flibs.me
          flisland.net
          flibusta.site

          ###LinkedIn
          linkedin.com
          www.linkedin.com

          ### Разное
          7-zip.org
          nextcloud.com
          nextcloud.org

          ###Пример маршрута по IP (убрать # в начале строки)
          #195.82.146.214

          ###Пример маршрута по CIDR (убрать # в начале строки)
          #103.21.244.0/22

          ###Пример маршрута по диапазону (убрать # в начале строки)
          #100.100.100.200-100.100.100.210
          EOF
          fi

  - name: Create /opt/etc/direct.txt
    raw: |
          if [ ! -f {{ custom_direct_hosts }} ]; then tee {{ custom_direct_hosts }} > /dev/null <<EOF
          # Pikabu (не работает под некоторыми VPN)
          pikabu.ru

          ###Пример маршрута по IP (убрать # в начале строки)
          #195.82.146.214

          ###Пример маршрута по CIDR (убрать # в начале строки)
          #103.21.244.0/22

          ###Пример маршрута по диапазону (убрать # в начале строки)
          #100.100.100.200-100.100.100.210
          EOF
          fi

  - name: Update permissions for created files
    raw: |
          chmod +x \
          {{ prefix }}/bin/routing-update.sh \
          {{ prefix }}/bin/routing-update-lists.sh \
          {{ prefix }}/bin/routing-apply-list.sh \
          {{ prefix }}/bin/routing-apply-custom-list.sh \
          {{ prefix }}/etc/ndm/fs.d/100-routing-ipset.sh \
          {{ prefix }}/etc/ndm/netfilter.d/100-routing-fwmarks.sh \
          {{ prefix }}/etc/ndm/ifstatechanged.d/100-routing-route.sh \
          {{ prefix }}/etc/cron.daily/100-routing-update.sh
